# SunAllocator SSR controller — ESP-01(S) single-channel
# Notes:
# - ESP-01 exposes only GPIO0 and GPIO2 as general-purpose pins.
# - Both GPIO0 and GPIO2 are bootstrapping pins and MUST be pulled high at boot.
#   Do not connect SSR inputs that pull these pins low at boot. Use proper pull-ups
#   and/or a transistor driver if your SSR input draws significant current.
# - Default here uses GPIO2 for PWM output.
#
# Default profile assumes DC SSR or MOSFET driver (fast PWM). For AC SSR, see the
# slow_pwm alternative block below.

esphome:
  name: sunallocator-relay-esp01
  comment: "SunAllocator SSR controller (ESP-01, single channel)"

esp8266:
  board: esp01_1m

logger:
  baud_rate: 0
api:
  on_client_disconnected:
    then:
      - logger.log: "API disconnected → turning relay OFF (fail-safe)"
      - light.turn_off: sv_relay_light_1
      - select.set_option:
          id: sv_mode_select_1
          option: "Off"
ota:
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "SA-SSR-Setup"

# OUTPUT (DC SSR default — fast PWM)
output:
  - platform: esp8266_pwm
    id: sv_ssr_output_1
    pin: GPIO1          # Boot pin: ensure pulled-up, do not load low on boot
    frequency: 1000 Hz  # ~1 kHz for DC SSR / MOSFET
  # On-board status LED (ESP-01 blue LED on GPIO1/TX, active-low)
  - platform: gpio
    id: sv_status_led_out
    pin: GPIO2
    inverted: true

# Alternative for AC SSR — comment block above and use slow_pwm below
# output:
#   - platform: slow_pwm
#     id: sv_ssr_output_1
#     pin: GPIO1
#     period: 1.5s       # 1.0–2.0 s for AC zero-cross SSR

light:
  - platform: monochromatic
    name: "SunAllocator Relay 1"
    id: sv_relay_light_1
    output: sv_ssr_output_1
    restore_mode: ALWAYS_OFF

select:
  - platform: template
    name: "SunAllocator Mode 1"
    id: sv_mode_select_1
    optimistic: true
    options:
      - "Off"
      - "On"
      - "Proportional"
    initial_option: "Off"
    set_action:
      then:
        - lambda: |-
            auto opt = id(sv_mode_select_1).state.c_str();
            if (strcmp(opt, "Off") == 0) {
              id(sv_relay_light_1).turn_off();
            } else if (strcmp(opt, "On") == 0) {
              auto call = id(sv_relay_light_1).turn_on();
              call.set_brightness(1.0f);
              call.perform();
            } else if (strcmp(opt, "Proportional") == 0) {
              // Proportional: HA SunAllocator will set brightness
              auto call = id(sv_relay_light_1).turn_on();
              call.perform();
            }

script:
  - id: sv_led_pulse
    then:
      - output.turn_on: sv_status_led_out
      - delay: 200ms
      - output.turn_off: sv_status_led_out

interval:
  # Fast blink every 2s when in Proportional mode and power > 0%
  - interval: 2s
    then:
      - if:
          condition:
            lambda: 'return id(sv_mode_select_1).state == "Proportional" && id(sv_relay_light_1).current_values.get_brightness() > 0.0f;'
          then:
            - script.execute: sv_led_pulse

  # Solid ON when enabled but not actively outputting proportional power
  - interval: 1s
    then:
      - if:
          condition:
            lambda: |
              bool prop_active = (id(sv_mode_select_1).state == "Proportional") && (id(sv_relay_light_1).current_values.get_brightness() > 0.0f);
              bool enabled = (id(sv_mode_select_1).state == "On") || (id(sv_mode_select_1).state == "Proportional");
              return enabled && !prop_active;
          then:
            - output.turn_on: sv_status_led_out
          else:
            - output.turn_off: sv_status_led_out

  # Heartbeat: pulse once every 10 seconds when fully Off
  - interval: 10s
    then:
      - if:
          condition:
            lambda: 'return id(sv_mode_select_1).state == "Off";'
          then:
            - script.execute: sv_led_pulse

sensor:
  - platform: wifi_signal
    name: "SV ESP01 WiFi Signal"
    update_interval: 30s
  - platform: uptime
    name: "SV ESP01 Uptime"
  - platform: template
    name: "SV Relay 1 Percent"
    id: sv_relay_1_percent
    unit_of_measurement: "%"
    accuracy_decimals: 0
    update_interval: 2s
    lambda: |-
      return id(sv_relay_light_1).current_values.is_on()
        ? (id(sv_relay_light_1).current_values.get_brightness() * 100.0f)
        : 0.0f;

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "SV ESP01 IP"